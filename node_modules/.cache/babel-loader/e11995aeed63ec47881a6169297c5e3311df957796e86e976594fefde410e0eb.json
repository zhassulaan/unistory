{"ast":null,"code":"var _jsxFileName = \"/Users/zhassik/Desktop/unistory/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getLocalItem = () => {\n  let user = localStorage.getItem('user');\n  if (user) {\n    return JSON.parse(localStorage.getItem('user') || '{}');\n  } else {\n    return ['', '', ''];\n  }\n};\nfunction App() {\n  _s();\n  const [defaultAccount, setDefaultAccount] = useState(null);\n  const user = getLocalItem();\n  window.onload = event => {\n    isConnected();\n  };\n  async function isConnected() {\n    const accounts = await window.ethereum.request({\n      method: 'eth_accounts'\n    });\n    if (accounts.length) {\n      setDefaultAccount(accounts[0]);\n      console.log(`You're connected to: ${accounts[0]}`);\n    } else {\n      console.log(\"Metamask is not connected\");\n    }\n  }\n  const connectWalletHandler = () => {\n    if (window.ethereum) {\n      // if metamask exists\n      window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(result => {\n        accountChangedHandler(result[0]);\n      });\n    } else {\n      console.log('Please, install MetaMask');\n    }\n  };\n  const accountChangedHandler = newAccount => {\n    setDefaultAccount(newAccount);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"JhrM6ej6GUOHDX38MTiekPOsU1U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","getLocalItem","user","localStorage","getItem","JSON","parse","App","defaultAccount","setDefaultAccount","window","onload","event","isConnected","accounts","ethereum","request","method","length","console","log","connectWalletHandler","then","result","accountChangedHandler","newAccount"],"sources":["/Users/zhassik/Desktop/unistory/src/App.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport Home from \"./pages/HomePage\";\nimport User from \"./pages/UserPage\";\n\nconst getLocalItem = () => {\n\tlet user = localStorage.getItem('user');\n\n\tif (user) {\n\t\treturn JSON.parse(localStorage.getItem('user') || '{}');\n\t} else {\n\t\treturn ['', '', ''];\n\t}\n}\n\nfunction App() {\n\tconst [defaultAccount, setDefaultAccount] = useState(null);\n\tconst user: string[] = getLocalItem();\n\n\twindow.onload = (event) => {\n\t\tisConnected();\n\t};\n\t\t\t \n\tasync function isConnected() {\n\t\tconst accounts = await window.ethereum.request({method: 'eth_accounts'});       \n\t\tif (accounts.length) {\n\t\t\tsetDefaultAccount(accounts[0])\n\t\t\tconsole.log(`You're connected to: ${accounts[0]}`);\n\t\t} else {\n\t\t\tconsole.log(\"Metamask is not connected\");\n\t\t}\n\t}\n\n\tconst connectWalletHandler = () => {\n\t\tif (window.ethereum) {\n\t\t\t// if metamask exists\n\t\t\twindow.ethereum.request({ method: 'eth_requestAccounts'})\n\t\t\t.then((result: any) => {\n\t\t\t\taccountChangedHandler(result[0]);\n\t\t\t})\n\t\t} else {\n\t\t\tconsole.log('Please, install MetaMask');\n\t\t}\n\t}\n\n\tconst accountChangedHandler = (newAccount: any) => {\n\t\tsetDefaultAccount(newAccount);\n\t}\n\n  return (\n    <div className=\"App\">\n\t\t{/* <Router>\n\t\t\t<Routes>\n\t\t\t\t<Route path=\"/unistory\" element={ <Home account={ defaultAccount } connect={ connectWalletHandler } user={ user } /> } />\n\t\t\t\t<Route path=\"/user\" element={ <User account={ defaultAccount } connect={ connectWalletHandler } user={ user } /> } />\n\t\t\t</Routes>\n      </Router> */}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC;AAKxC,MAAMC,YAAY,GAAG,MAAM;EAC1B,IAAIC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAEvC,IAAIF,IAAI,EAAE;IACT,OAAOG,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;EACxD,CAAC,MAAM;IACN,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACpB;AACD,CAAC;AAED,SAASG,GAAG,GAAG;EAAA;EACd,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAME,IAAc,GAAGD,YAAY,EAAE;EAErCS,MAAM,CAACC,MAAM,GAAIC,KAAK,IAAK;IAC1BC,WAAW,EAAE;EACd,CAAC;EAED,eAAeA,WAAW,GAAG;IAC5B,MAAMC,QAAQ,GAAG,MAAMJ,MAAM,CAACK,QAAQ,CAACC,OAAO,CAAC;MAACC,MAAM,EAAE;IAAc,CAAC,CAAC;IACxE,IAAIH,QAAQ,CAACI,MAAM,EAAE;MACpBT,iBAAiB,CAACK,QAAQ,CAAC,CAAC,CAAC,CAAC;MAC9BK,OAAO,CAACC,GAAG,CAAE,wBAAuBN,QAAQ,CAAC,CAAC,CAAE,EAAC,CAAC;IACnD,CAAC,MAAM;MACNK,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IACzC;EACD;EAEA,MAAMC,oBAAoB,GAAG,MAAM;IAClC,IAAIX,MAAM,CAACK,QAAQ,EAAE;MACpB;MACAL,MAAM,CAACK,QAAQ,CAACC,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAqB,CAAC,CAAC,CACxDK,IAAI,CAAEC,MAAW,IAAK;QACtBC,qBAAqB,CAACD,MAAM,CAAC,CAAC,CAAC,CAAC;MACjC,CAAC,CAAC;IACH,CAAC,MAAM;MACNJ,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACxC;EACD,CAAC;EAED,MAAMI,qBAAqB,GAAIC,UAAe,IAAK;IAClDhB,iBAAiB,CAACgB,UAAU,CAAC;EAC9B,CAAC;EAEA,oBACE;IAAK,SAAS,EAAC;EAAK;IAAA;IAAA;IAAA;EAAA,QAOd;AAEV;AAAC,GA5CQlB,GAAG;AAAA,KAAHA,GAAG;AA8CZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}